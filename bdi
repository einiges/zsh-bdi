#!/usr/bin/env zsh

local -A opts
opts[-n]='ewdn'
zparseopts -D -K -A opts n: h

[[ -v opts[-h] ]] && {
	<<- EOU
		usage: $0 [OPTIONS] PATTERN

		OPTIONS
		   -n     A list of the NOTATIONs to be considered, to find a matching
		          directory (default: ewdn)
		   -h     Print this help

		NOTATIONS
		   (d)ot   (.[...])
		        Treat a pattern of repeatedly used periods as n+1
		        directories up. '..' means, 3 directiories up
		   (e)mpty
		        Treat a missing pattern as one directory up
		   (n)umber   (0-n)
		        Treat a pattern as a number and go amount directories up
		        If number is 0 or greater than the amount of possible
		        directories the result will be /
		   (w)ord   (word [...])
		        Treat the pattern as a subsequence of a directory
		        Directories beginning with pattern are prioritized
	EOU
	return
}

[[ $opts[-n] =~ [^denw] ]] &&
	return 1

local ancestors=( / ${(s:/:)PWD:h} )
local dest=${(j:*:)@}

local notation
for notation in "${(s..u)opts[-n]}"
do
	case "$notation" in
		d)
			[[ $dest =~ ^\\.+$ ]] &&
				{ builtin cd /${(j:/:)ancestors[2,-(${#dest}+1)]}; return }
			;;
		e)
			[[ -z $dest ]] &&
				{ builtin cd $PWD:h; return }
			;;
		n)
			[[ $dest != <-> ]] &&
				continue

			(( dest == 0 || dest > #ancestors )) &&
				{ builtin cd /; return }

			(( dest > 0 )) &&
				{ builtin cd /${(j:/:)ancestors[2, $#ancestors - dest + 1]}; return }
			;;
		w)
			[[ -z $dest ]] &&
				continue

			local d
			(( d=${ancestors[(I)$dest]} )) || (( d=${ancestors[(I)$dest*]} ))

			(( d > 0 )) &&
				{ builtin cd /${(j:/:)ancestors[2, d]}; return }
			;;
	esac
done

return 1

